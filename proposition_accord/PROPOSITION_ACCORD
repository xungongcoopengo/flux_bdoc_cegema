<?xml version="1.0" encoding="UTF-8"?>
<?python
    import datetime
    from dateutil import relativedelta
    from trytond.pool import Pool
    from trytond.modules.coog_core import coog_date
?>
<ROOT xmlns:py="http://genshi.edgewall.org/">
    <DOCUMENT py:for="contract_loan in objects">
        <?python
            def extract_invoice(invoice, at_date, loan_id, contract_id):
                res = {
                    'details': [],
                    'start': invoice['start'],
                    'loan': {},
                    'options': {}
                    }
                for detail in invoice['details']:
                    cur_premium = detail.get('premium', None)
                    cur_is_extra_premium = True if cur_premium and cur_premium.extra_premium else False
                    cur_option = None
                    if cur_is_extra_premium:
                        cur_option = cur_premium.extra_premium.option if cur_premium.extra_premium.option else None
                    else:
                        cur_option = cur_premium.option if cur_premium.option else None
                    cur_coverage_code = cur_option.coverage.code if cur_premium and cur_option and cur_option.coverage else ''
                    cur_detail = {
                        'total_amount': detail['total_amount'],
                        'fee': detail['fee'],
                        'premium': {
                            'is_extra_premium': cur_is_extra_premium,
                            'coverage_code': cur_coverage_code
                            },
                        'loan': detail.get('loan', None),
                        'start': detail['start'],
                        'end': detail['end']
                        }
                    res['details'].append(cur_detail)

                    if cur_option and cur_coverage_code not in res['options'].keys() and cur_detail['loan'].id == loan_id:
                        res['options'][cur_coverage_code] = [{'share': s.share, 'extra_data': s.extra_data, 'extra_data_string': s.extra_data_string, 'end_date': s.end_date} for s in cur_option.get_shares_at_date(at_date, False) if s.loan.id == loan_id]
                        if cur_premium and cur_premium.main_contract and cur_premium.main_contract.id == contract_id:
                            for ce in cur_premium.main_contract.covered_elements:
                                for opt in ce.all_options:
                                    if opt.coverage.code not in res['options'].keys():
                                        shares = [{'share': s.share, 'extra_data': s.extra_data, 'extra_data_string': s.extra_data_string, 'end_date': s.end_date} for s in opt.get_shares_at_date(at_date, False) if s.loan.id == loan_id]
                                        if shares:
                                            res['options'][opt.coverage.code] = shares

                        cur_loan = None
                        if cur_detail['loan'] and cur_detail['loan'].id != res['loan'].get('loan_id', None) and cur_detail['loan'].id == loan_id:
                            cur_loan = cur_detail['loan']
                        index_loan = 0
                        for index, current_loan in enumerate(cur_option.parent_contract.used_loans):
                            if current_loan.id == loan_id:
                                index_loan = index + 1
                        if cur_loan:
                            res['loan'] = {
                                'loan_id': cur_loan.id,
                                'loan_index': index_loan,
                                'loan_number': cur_loan.number,
                                'loan_lender_name': cur_loan.lender.name if cur_loan.lender else '',
                                'loan_lender_commercial_name': cur_loan.lender.commercial_name if cur_loan.lender else '',
                                'loan_lender_agency': cur_loan.lender_address.bank_agency.name if cur_loan.lender_address and cur_loan.lender_address.bank_agency else '',
                                'loan_lender_address': cur_loan.lender_address.full_address if cur_loan.lender_address else '',
                                'loan_lender_street': cur_loan.lender_address.street if cur_loan.lender_address else '',
                                'loan_lender_zip': cur_loan.lender_address.zip if cur_loan.lender_address else '',
                                'loan_lender_city': cur_loan.lender_address.city if cur_loan.lender_address else '',
                                'loan_lender_country': cur_loan.lender_address.country.name if cur_loan.lender_address and cur_loan.lender_address.country else '',
                                'loan_kind': cur_loan.kind,
                                'loan_kind_string': cur_loan.kind_string,
                                'loan_loan_kind_code': cur_loan.loan_kind.code,
                                'loan_deferral_balloon_intermediate': cur_loan.deferral_balloon_intermediate,
                                'loan_duration': cur_loan.duration,
                                'loan_deferral': cur_loan.deferral,
                                'loan_deferral_duration': cur_loan.deferral_duration,
                                'loan_increments': [{'number_of_payments': increment.number_of_payments, 'payment_amount': increment.payment_amount, 'deferral': increment.deferral} for increment in cur_loan.increments],
                                'loan_amount': cur_loan.amount,
                                'loan_extra_data_string': cur_loan.extra_data_string,
                                'loan_rate': cur_loan.rate,
                                'loan_funds_release_date': cur_loan.funds_release_date,
                                'loan_payment_frequency': cur_loan.payment_frequency
                                }
                return res

            template = Pool().get('report.template')(id=doc_template[0])
            contract = contract_loan.contract
            loan = contract_loan.loan
            cur_start_date = max(contract.initial_start_date, loan.funds_release_date)
            effective_date = contract.initial_start_date
            first_payment_date = contract.initial_start_date
            if origin and origin.__name__ == 'contract.underwriting':
                underwriting = origin
                if origin.endorsement:
                    effective_date = underwriting.endorsement.endorsement.effective_date
                    if origin.endorsement.endorsement.definition and origin.endorsement.endorsement.definition.code == 'changement_date_d_effet_du_contrat':
                        cur_start_date = max(effective_date, cur_start_date)
                        first_payment_date = max(cur_start_date, first_payment_date)
            else:
                underwriting = contract.underwritings[-1] if contract.underwritings else None
                for cu in contract.underwritings:
                    if cu.status == 'waiting_client' and cu.decision.status == 'accepted_with_conditions':
                        underwriting = cu

            periods = contract._create_future_invoices(contract, contract.initial_start_date, contract.end_date)
            periods_underwriting, average_rates = underwriting.get_future_invoices(underwriting.id, callback=extract_invoice, callback_params=[effective_date, loan.id, contract.id])
            options_after_simulation = {}
            loan_after_simulation = None
            end_date = cur_start_date
            new_contract = None
            for period in periods_underwriting:
                for option_code in period['options'].keys():
                    if option_code not in options_after_simulation.keys():
                        options_after_simulation[option_code] = period['options'][option_code]
                        for share in options_after_simulation[option_code]:
                            if share.get('end_date', None) and share['end_date'] > end_date:
                                end_date = share['end_date']
                loan_after_simulation = loan_after_simulation or period['loan']

            index_loan = loan_after_simulation['loan_index'] if loan_after_simulation else 0
            covered_element = contract.covered_elements[0] if contract.covered_elements else None
            covered_element_party = covered_element.party if covered_element else None
            subscriber = contract.subscriber if contract else None
            covered_element_address = covered_element_party.get_address() if covered_element_party else None
            if not covered_element_address and covered_element_party and covered_element_party.addresses:
                covered_element_address = covered_element_party.addresses[-1]
            subscriber_address = subscriber.get_address() if subscriber else None
            if not subscriber_address and subscriber and subscriber.addresses:
                subscriber_address = subscriber.addresses[-1]
            covered_element_version = covered_element.get_version_at_date(cur_start_date)
            to_generate = template and contract and loan and index_loan > 0 and subscriber and covered_element and covered_element_party and covered_element_version and underwriting

            possible_frequencies = {'month': 'Mensuelle', 'quarter': 'Trimestrielle', 'half_year': 'Semestrielle', 'year': 'Annuelle'}
            codes_options = {'slade_dc': "Décès (DC)", 'slade_ptia': "Perte Totale et Irréversible d'Automonie (PTIA)", 'slade_ipp': "Invalidité Permanente Partielle (IPP)",
                             'slade_ipt': "Invalidité Permanente et Totale (IPT)", 'slade_ippro': "Invalidité Professionnelle (IPPro)",
                             'slade_itt': "Incapacité Temporaire Totale de Travail (ITT)", 'slade_pe': "Perte d'Emploi (PE)"}
            codes_mno_sports = {'slade_mno': "Sérénité ou Sérénité +", 'slade_sport': "Sport +"}
            loan_options_code = {}
            loan_options_decision = {}
            loan_mno_sport_code = {}
            loan_mno_sport_decision = {}
            options_extra_premiums = {}
            options_exclusions = {}
            options_age = None
            decision_insurer = ''
            for option_code in options_after_simulation.keys():
                shares = options_after_simulation[option_code]
                if shares:
                    cur_option_age = shares[-1]['extra_data'].get('age_de_fin_de_garantie', None)
                    if cur_option_age and '65' not in cur_option_age:
                        options_age = cur_option_age
                    if option_code in codes_options.keys():
                        loan_options_code[option_code] = shares[-1]['share']
                    elif option_code in codes_mno_sports.keys() and shares[-1]['share'] > 0:
                        if option_code == 'slade_mno':
                            mno_option = shares[-1]['extra_data'].get('slade_mno_option', None)
                            if mno_option == 'serenite_plus':
                                loan_mno_sport_code[option_code] = 'Sérénité +'
                            elif mno_option == 'serenite':
                                loan_mno_sport_code[option_code] = 'Sérénité'
                            else:
                                loan_mno_sport_code[option_code] = ''
                        elif option_code == 'slade_sport':
                                loan_mno_sport_code[option_code] = 'Sport +'
            if underwriting:
                decision_insurer = underwriting.decision.name if underwriting.decision else ''
                if underwriting.underwriting_options:
                    for cuo in underwriting.underwriting_options:
                        coverage_code = cuo.coverage.code if cuo.coverage else (cuo.option.coverage.code if cuo.option and cuo.option.coverage else "coverage_code_error")
                        options_extra_premiums[coverage_code] = [extra_premium.motive.name for extra_premium in cuo.extra_premiums] if cuo.extra_premiums else []
                        options_exclusions[coverage_code] = [exclusion.comment for exclusion in cuo.exclusions] if cuo.exclusions else []
                        if coverage_code in codes_options.keys():
                            loan_options_decision[coverage_code] = cuo.decision.name if cuo.decision else ''
                            if cuo.decision.status == 'denied' and coverage_code in loan_options_code.keys():
                                loan_options_code[coverage_code] = None
                                if coverage_code == 'slade_ptia':
                                    options_age = None
                        elif coverage_code in codes_mno_sports.keys():
                            loan_mno_sport_decision[coverage_code] = cuo.decision.name if cuo.decision else ''
                            if cuo.decision.status == 'denied' and coverage_code in loan_mno_sport_code.keys():
                                loan_mno_sport_decision[coverage_code] = 'Refusée'

            if 'slade_ptia' in loan_options_decision.keys() and 'slade_dc' in loan_options_decision.keys():
                if loan_options_decision['slade_dc'] == 'Acceptée avec conditions' and loan_options_decision['slade_ptia'] in ('Acceptée', 'Accepté'):
                    loan_options_decision['slade_ptia'] = 'Acceptée avec conditions'

            total_cotisation_fee = Decimal(0)
            total_cotisation_agis_fee = Decimal(0)
            total_cotisation_document_fee = Decimal(0)
            total_cotisation_brokerage_fee = Decimal(0)
            cotisation_dc_ptia_before_start_date = Decimal(0)
            cotisation_itip_before_start_date = Decimal(0)
            cotisation_option_before_start_date = Decimal(0)
            cotisation_total_before_start_date = Decimal(0)

            for period in periods:
                for detail in [d for d in period['details'] if (d.get('fee', None) and index_loan == 1 and not d.get('loan', None))]:
                    premium = detail.get('premium', None)
                    if premium:
                        fee_code = premium.rated_entity.code if premium and premium.rated_entity else 'empty_fee_code'
                        if 'adhesion' in fee_code:
                            total_cotisation_agis_fee += detail['fee']
                        if 'dossier' in fee_code:
                            total_cotisation_document_fee += detail['fee']
                        if 'courtage' in fee_code:
                            total_cotisation_brokerage_fee += detail['fee']
                        total_cotisation_fee += detail['fee']
                if cur_start_date > contract.initial_start_date:
                    for detail in [d for d in period['details'] if (d.get('loan', '') == loan and contract.initial_start_date <= d['start'] < cur_start_date)]:
                        premium = detail.get('premium', None)
                        coverage_code = 'empty_code'
                        if premium:
                            if premium.option and premium.option.coverage:
                                coverage_code = premium.option.coverage.code
                            elif premium.extra_premium and premium.extra_premium.option and premium.extra_premium.option.coverage:
                                coverage_code = premium.extra_premium.option.coverage.code
                        if coverage_code in ['slade_dc', 'slade_ptia']:
                            cotisation_dc_ptia_before_start_date += detail['total_amount'] - detail['fee']
                        if coverage_code in ['slade_itt', 'slade_ipt', 'slade_ipp', 'slade_ippro', 'slade_pe']:
                            cotisation_itip_before_start_date += detail['total_amount'] - detail['fee']
                        if coverage_code in ['slade_mno', 'slade_sport']:
                            cotisation_option_before_start_date += detail['total_amount'] - detail['fee']
                        cotisation_total_before_start_date += detail['total_amount'] - detail['fee']

            cotisation_dc_ptia_extra_premium_before_start_date = Decimal(0)
            cotisation_dc_ptia_standard_underwriting_before_start_date = Decimal(0)
            cotisation_itip_extra_premium_before_start_date = Decimal(0)
            cotisation_itip_standard_underwriting_before_start_date = Decimal(0)
            cotisation_option_extra_premium_before_start_date = Decimal(0)
            cotisation_option_standard_underwriting_before_start_date = Decimal(0)
            cotisation_total_extra_premium_before_start_date = Decimal(0)
            cotisation_total_standard_underwriting_before_start_date = Decimal(0)
            if cur_start_date > contract.initial_start_date:
                for period_underwriting in periods_underwriting:
                    for detail_underwriting in [d for d in period_underwriting['details'] if (d.get('loan', '') == loan and contract.initial_start_date <= d['start'] < cur_start_date)]:
                        is_extra_premium = detail_underwriting['premium']['is_extra_premium']
                        coverage_code = detail_underwriting['premium']['coverage_code']
                        if coverage_code in ['slade_dc', 'slade_ptia']:
                            if is_extra_premium:
                                cotisation_dc_ptia_extra_premium_before_start_date += detail_underwriting['total_amount'] - detail_underwriting['fee']
                            else:
                                cotisation_dc_ptia_standard_underwriting_before_start_date += detail_underwriting['total_amount'] - detail_underwriting['fee']
                        if coverage_code in ['slade_itt', 'slade_ipt', 'slade_ipp', 'slade_ippro', 'slade_pe']:
                            if is_extra_premium:
                                cotisation_itip_extra_premium_before_start_date += detail_underwriting['total_amount'] - detail_underwriting['fee']
                            else:
                                cotisation_itip_standard_underwriting_before_start_date += detail_underwriting['total_amount'] - detail_underwriting['fee']
                        if coverage_code in ['slade_mno', 'slade_sport']:
                            if is_extra_premium:
                                cotisation_option_extra_premium_before_start_date += detail_underwriting['total_amount'] - detail_underwriting['fee']
                            else:
                                cotisation_option_standard_underwriting_before_start_date += detail_underwriting['total_amount'] - detail_underwriting['fee']
                        if is_extra_premium:
                            cotisation_total_extra_premium_before_start_date += detail_underwriting['total_amount'] - detail_underwriting['fee']
                        else:
                            cotisation_total_standard_underwriting_before_start_date += detail_underwriting['total_amount'] - detail_underwriting['fee']

            total_cotisation_dc_ptia_standard = Decimal(0)
            total_cotisation_dc_ptia_standard_underwriting = Decimal(0)
            total_cotisation_dc_ptia_extra_premium = Decimal(0)
            total_cotisation_itip_standard = Decimal(0)
            total_cotisation_itip_standard_underwriting = Decimal(0)
            total_cotisation_itip_extra_premium = Decimal(0)
            total_cotisation_option_standard = Decimal(0)
            total_cotisation_option_standard_underwriting = Decimal(0)
            total_cotisation_option_extra_premium = Decimal(0)
            total_cotisation_total_standard = Decimal(0)
            total_cotisation_total_standard_underwriting = Decimal(0)
            total_cotisation_total_extra_premium = Decimal(0)
            contract_years = []

            if cur_start_date and end_date:
                while cur_start_date <= end_date:
                    next_date = coog_date.add_year(cur_start_date, 1, True)
                    cur_end_date = min(end_date, coog_date.add_day(next_date, -1))
                    cotisation_dc_ptia_standard = Decimal(0)
                    cotisation_dc_ptia_standard_underwriting = Decimal(0)
                    cotisation_dc_ptia_extra_premium = Decimal(0)
                    cotisation_itip_standard = Decimal(0)
                    cotisation_itip_standard_underwriting = Decimal(0)
                    cotisation_itip_extra_premium = Decimal(0)
                    cotisation_option_standard = Decimal(0)
                    cotisation_option_standard_underwriting = Decimal(0)
                    cotisation_option_extra_premium = Decimal(0)
                    cotisation_total_standard = Decimal(0)
                    cotisation_total_standard_underwriting = Decimal(0)
                    cotisation_total_extra_premium = Decimal(0)
                    for period in periods:
                        for detail in [d for d in period['details'] if (d.get('loan', '') == loan and cur_start_date <= d['start'] <= cur_end_date)]:
                            premium = detail.get('premium', None)
                            coverage_code = premium.option.coverage.code if premium and premium.option and premium.option.coverage else 'empty_code'
                            if coverage_code in ['slade_dc', 'slade_ptia']:
                                cotisation_dc_ptia_standard += detail['total_amount'] - detail['fee']
                            if coverage_code in ['slade_itt', 'slade_ipt', 'slade_ipp', 'slade_ippro', 'slade_pe']:
                                cotisation_itip_standard += detail['total_amount'] - detail['fee']
                            if coverage_code in ['slade_mno', 'slade_sport']:
                                cotisation_option_standard += detail['total_amount'] - detail['fee']
                            cotisation_total_standard += detail['total_amount'] - detail['fee']
                    for period_underwriting in periods_underwriting:
                        for detail_underwriting in [d for d in period_underwriting['details'] if (d.get('loan', '') == loan and cur_start_date <= d['start'] <= cur_end_date)]:
                            is_extra_premium = detail_underwriting['premium']['is_extra_premium']
                            coverage_code = detail_underwriting['premium']['coverage_code']
                            if coverage_code in ['slade_dc', 'slade_ptia']:
                                if is_extra_premium:
                                    cotisation_dc_ptia_extra_premium += detail_underwriting['total_amount'] - detail_underwriting['fee']
                                else:
                                    cotisation_dc_ptia_standard_underwriting += detail_underwriting['total_amount'] - detail_underwriting['fee']
                            if coverage_code in ['slade_itt', 'slade_ipt', 'slade_ipp', 'slade_ippro', 'slade_pe']:
                                if is_extra_premium:
                                    cotisation_itip_extra_premium += detail_underwriting['total_amount'] - detail_underwriting['fee']
                                else:
                                    cotisation_itip_standard_underwriting += detail_underwriting['total_amount'] - detail_underwriting['fee']
                            if coverage_code in ['slade_mno', 'slade_sport']:
                                if is_extra_premium:
                                    cotisation_option_extra_premium += detail_underwriting['total_amount'] - detail_underwriting['fee']
                                else:
                                    cotisation_option_standard_underwriting += detail_underwriting['total_amount'] - detail_underwriting['fee']
                            if is_extra_premium:
                                cotisation_total_extra_premium += detail_underwriting['total_amount'] - detail_underwriting['fee']
                            else:
                                cotisation_total_standard_underwriting += detail_underwriting['total_amount'] - detail_underwriting['fee']
                    if cur_start_date == cur_end_date:
                        contract_years[-1]['cotisation_dc_ptia_standard'] += cotisation_dc_ptia_standard
                        contract_years[-1]['cotisation_dc_ptia_standard_underwriting'] += cotisation_dc_ptia_standard_underwriting
                        contract_years[-1]['cotisation_dc_ptia_extra_premium'] += cotisation_dc_ptia_extra_premium
                        contract_years[-1]['cotisation_itip_standard'] += cotisation_itip_standard
                        contract_years[-1]['cotisation_itip_standard_underwriting'] += cotisation_itip_standard_underwriting
                        contract_years[-1]['cotisation_itip_extra_premium'] += cotisation_itip_extra_premium
                        contract_years[-1]['cotisation_option_standard'] += cotisation_option_standard
                        contract_years[-1]['cotisation_option_standard_underwriting'] += cotisation_option_standard_underwriting
                        contract_years[-1]['cotisation_option_extra_premium'] += cotisation_option_extra_premium
                        contract_years[-1]['cotisation_total_standard'] += cotisation_total_standard
                        contract_years[-1]['cotisation_total_standard_underwriting'] += cotisation_total_standard_underwriting
                        contract_years[-1]['cotisation_total_extra_premium'] += cotisation_total_extra_premium
                    else:
                        contract_years.append({
                                'start_date': cur_start_date,
                                'end_date': cur_end_date,
                                'cotisation_dc_ptia_standard': cotisation_dc_ptia_standard,
                                'cotisation_dc_ptia_standard_underwriting': cotisation_dc_ptia_standard_underwriting,
                                'cotisation_dc_ptia_extra_premium': cotisation_dc_ptia_extra_premium,
                                'cotisation_itip_standard': cotisation_itip_standard,
                                'cotisation_itip_standard_underwriting': cotisation_itip_standard_underwriting,
                                'cotisation_itip_extra_premium': cotisation_itip_extra_premium,
                                'cotisation_option_standard': cotisation_option_standard,
                                'cotisation_option_standard_underwriting': cotisation_option_standard_underwriting,
                                'cotisation_option_extra_premium': cotisation_option_extra_premium,
                                'cotisation_total_standard': cotisation_total_standard,
                                'cotisation_total_standard_underwriting': cotisation_total_standard_underwriting,
                                'cotisation_total_extra_premium': cotisation_total_extra_premium,
                                })
                    total_cotisation_dc_ptia_standard += cotisation_dc_ptia_standard
                    total_cotisation_dc_ptia_standard_underwriting += cotisation_dc_ptia_standard_underwriting
                    total_cotisation_dc_ptia_extra_premium += cotisation_dc_ptia_extra_premium
                    total_cotisation_itip_standard += cotisation_itip_standard
                    total_cotisation_itip_standard_underwriting += cotisation_itip_standard_underwriting
                    total_cotisation_itip_extra_premium += cotisation_itip_extra_premium
                    total_cotisation_option_standard += cotisation_option_standard
                    total_cotisation_option_standard_underwriting += cotisation_option_standard_underwriting
                    total_cotisation_option_extra_premium += cotisation_option_extra_premium
                    total_cotisation_total_standard += cotisation_total_standard
                    total_cotisation_total_standard_underwriting += cotisation_total_standard_underwriting
                    total_cotisation_total_extra_premium += cotisation_total_extra_premium
                    cur_start_date = next_date

            if cotisation_total_before_start_date > 0:
                contract_years[0]['cotisation_dc_ptia_standard'] += cotisation_dc_ptia_before_start_date
                contract_years[0]['cotisation_itip_standard'] += cotisation_itip_before_start_date
                contract_years[0]['cotisation_option_standard'] += cotisation_option_before_start_date
                contract_years[0]['cotisation_total_standard'] += cotisation_total_before_start_date
                total_cotisation_dc_ptia_standard += cotisation_dc_ptia_before_start_date
                total_cotisation_itip_standard += cotisation_itip_before_start_date
                total_cotisation_option_standard += cotisation_option_before_start_date
                total_cotisation_total_standard += cotisation_total_before_start_date
            if cotisation_total_extra_premium_before_start_date > 0:
                contract_years[0]['cotisation_dc_ptia_extra_premium'] += cotisation_dc_ptia_extra_premium_before_start_date
                contract_years[0]['cotisation_itip_extra_premium'] += cotisation_itip_extra_premium_before_start_date
                contract_years[0]['cotisation_option_extra_premium'] += cotisation_option_extra_premium_before_start_date
                contract_years[0]['cotisation_total_extra_premium'] += cotisation_total_extra_premium_before_start_date
                total_cotisation_dc_ptia_extra_premium += cotisation_dc_ptia_standard_underwriting_before_start_date
                total_cotisation_itip_extra_premium += cotisation_itip_extra_premium_before_start_date
                total_cotisation_option_extra_premium += cotisation_option_extra_premium_before_start_date
                total_cotisation_total_extra_premium += cotisation_total_extra_premium_before_start_date
            if cotisation_total_standard_underwriting_before_start_date > 0:
                contract_years[0]['cotisation_dc_ptia_standard_underwriting'] += cotisation_dc_ptia_standard_underwriting_before_start_date
                contract_years[0]['cotisation_itip_standard_underwriting'] += cotisation_itip_standard_underwriting_before_start_date
                contract_years[0]['cotisation_option_standard_underwriting'] += cotisation_option_standard_underwriting_before_start_date
                contract_years[0]['cotisation_total_standard_underwriting'] += cotisation_total_standard_underwriting_before_start_date
                total_cotisation_dc_ptia_standard_underwriting += cotisation_dc_ptia_standard_underwriting_before_start_date
                total_cotisation_itip_standard_underwriting += cotisation_itip_standard_underwriting_before_start_date
                total_cotisation_option_standard_underwriting += cotisation_option_standard_underwriting_before_start_date
                total_cotisation_total_standard_underwriting += cotisation_total_standard_underwriting_before_start_date
        ?>
        <TECHDATA py:if="to_generate">
            <MODELE>${template.code}</MODELE>
            <STATUS_DOCUMENT></STATUS_DOCUMENT>
            <LISTE_CONTRATS>
                <NUM_CONTRAT>${str(contract.external_number) + '-' + str(contract.id)}</NUM_CONTRAT>
                <PERIMETRE>EMP</PERIMETRE>
                <STATUT_CONTRAT></STATUT_CONTRAT>
                <DATE_EFFET_CONTRAT></DATE_EFFET_CONTRAT>
                <MONTANT_PRET>${loan_after_simulation.get('loan_amount', '')}</MONTANT_PRET>
                <TYPE_DE_PRET>${loan_after_simulation.get('loan_kind_string', '')}</TYPE_DE_PRET>
            </LISTE_CONTRATS>
            <LISTE_ADHERENT>
                <NUM_ADHERENT>${subscriber.code}</NUM_ADHERENT>
                <RAISON_SOCIALE_ADHERENT>${subscriber.name if not subscriber.is_person else ''}</RAISON_SOCIALE_ADHERENT>
                <NOM_ADHERENT>${subscriber.name if subscriber.is_person else ''}</NOM_ADHERENT>
                <PRENOM_ADHERENT>${subscriber.first_name if subscriber.is_person else ''}</PRENOM_ADHERENT>
                <DATE_NAISSANCE_ADHERENT></DATE_NAISSANCE_ADHERENT>
            </LISTE_ADHERENT>
            <LISTE_ASSURES>
                <NUM_ASSURE>${covered_element_party.code}</NUM_ASSURE>
                <NOM_ASSURE>${covered_element_party.name}</NOM_ASSURE>
                <PRENOM_ASSURE>${covered_element_party.first_name}</PRENOM_ASSURE>
                <DATE_NAISSANCE_ASSURE>${covered_element_party.birth_date.strftime('%Y-%m-%d')}</DATE_NAISSANCE_ASSURE>
            </LISTE_ASSURES>
            <LISTE_APPORTEUR>
                <NUM_APPORTEUR></NUM_APPORTEUR>
                <RAISON_SOCIALE_APPORTEUR></RAISON_SOCIALE_APPORTEUR>
                <NOM_CONTACT_APPORTEUR></NOM_CONTACT_APPORTEUR>
                <PRENOM_CONTACT_APPORTEUR></PRENOM_CONTACT_APPORTEUR>
            </LISTE_APPORTEUR>
            <NUM_PLI></NUM_PLI>
            <ORIGINE>BDOC</ORIGINE>
            <GARANTIES></GARANTIES>
            <NUM_ACTE_GESTION></NUM_ACTE_GESTION>
            <DATE_NUMERISATION></DATE_NUMERISATION>
            <DATE_ENVOI></DATE_ENVOI>
            <OBJET_DISTRIBUTION></OBJET_DISTRIBUTION>
            <NOM_EXPEDITEUR></NOM_EXPEDITEUR>
            <PRENOM_EXPEDITEUR></PRENOM_EXPEDITEUR>
            <EMAIL_EXPEDITEUR></EMAIL_EXPEDITEUR>
            <NOM_DESTINATAIRE_PRINCIPAL></NOM_DESTINATAIRE_PRINCIPAL>
            <PRENOM_DESTINATAIRE_PRINCIPAL></PRENOM_DESTINATAIRE_PRINCIPAL>
            <EMAIL_DESTINATAIRE_PRINCIPAL></EMAIL_DESTINATAIRE_PRINCIPAL>
            <LISTE_DESTINATAIRE_COPIE>
                <NOM_DESTINATAIRE_COPIE></NOM_DESTINATAIRE_COPIE>
                <PRENOM_DESTINATAIRE_COPIE></PRENOM_DESTINATAIRE_COPIE>
                <EMAIL_DESTINATAIRE_COPIE></EMAIL_DESTINATAIRE_COPIE>
            </LISTE_DESTINATAIRE_COPIE>
            <PARTENAIRE_TPA></PARTENAIRE_TPA>
            <NIVEAU_CONFIDENTIALITE>N/A</NIVEAU_CONFIDENTIALITE>
            <TYPE_ACTE_GESTION_ASSOCIE></TYPE_ACTE_GESTION_ASSOCIE>
            <LISTE_PRODUIT>
                <NOM_PRODUIT></NOM_PRODUIT>
            </LISTE_PRODUIT>
            <MONTANTS_GARANTIES></MONTANTS_GARANTIES>
            <DOCUMENT_ENTRANT_SORTANT>S</DOCUMENT_ENTRANT_SORTANT>
            <RESEAU_DISTRIBUTION></RESEAU_DISTRIBUTION>
            <PRIORITE></PRIORITE>
            <DATE_RECEPTION>${datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</DATE_RECEPTION>
            <COURRIER_AR></COURRIER_AR>
            <VIP></VIP>
            <ETAT_DOSSIER></ETAT_DOSSIER>
            <MOTIF>Document sortant</MOTIF>
            <SOUS_MOTIF>Archives</SOUS_MOTIF>
            <ID_TYPE_DOC_COOG_ATTENDU></ID_TYPE_DOC_COOG_ATTENDU>
            <TYPE_DOC_COOG_ATTENDU></TYPE_DOC_COOG_ATTENDU>
            <STATUT_TYPE_DOC_COOG_ATTENDU></STATUT_TYPE_DOC_COOG_ATTENDU>
            <DATERECEPTION_TYPE_DOC_COOG_ATTENDU></DATERECEPTION_TYPE_DOC_COOG_ATTENDU>
            <TYPE_RENS_COMPLEMENTAIRE></TYPE_RENS_COMPLEMENTAIRE>
            <AFFICHAGE_COURTIER></AFFICHAGE_COURTIER>
            <AFFICHAGE_ASSURE></AFFICHAGE_ASSURE>
            <AFFICHAGE_GESTION></AFFICHAGE_GESTION>
            <TYPE_QUESTIONNAIRE></TYPE_QUESTIONNAIRE>
            <SIGNE_ELECTRONIQUEMENT>O</SIGNE_ELECTRONIQUEMENT>
            <ORIGINAL></ORIGINAL>
            <STREAM></STREAM>
            <RESEAU></RESEAU>
            <MARQUE_CONTRAT></MARQUE_CONTRAT>
            <TYPE_DOCUMENT>${template.name}</TYPE_DOCUMENT>
            <ID_DEMANDE></ID_DEMANDE>
            <AFFICHAGE_APPORTEUR></AFFICHAGE_APPORTEUR>
            <MODE_DISTRIBUTION></MODE_DISTRIBUTION>
            <DATELIMITE_TRAITEMENT></DATELIMITE_TRAITEMENT>
            <ETAPE_CONTRAT></ETAPE_CONTRAT>
            <GED>O</GED>
            <GED_ONBASE>O</GED_ONBASE>
            <GED_NOM_FICHIER>PROPOSITION_ACCORD_${datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')}</GED_NOM_FICHIER>
            <IDENTIFIANT_DOCUMENT_UNIQUE></IDENTIFIANT_DOCUMENT_UNIQUE>
        </TECHDATA>
        <QR_CODE py:if="to_generate">
            <TYPE_DOCUMENT>${template.name}</TYPE_DOCUMENT>
            <NUM_CONTRAT>${str(contract.external_number) + '-' + str(contract.id)}</NUM_CONTRAT>
        </QR_CODE>
        <GENERAL py:if="to_generate">
            <?python
                client_identifier = None
                for identifier in covered_element_party.identifiers:
                    if identifier.type == 'espace_client':
                        client_identifier = identifier.code
            ?>
            <IDENTIFIANT_ASSURE>${client_identifier}</IDENTIFIANT_ASSURE>
            <NUM_ADHESION>${str(contract.external_number)}</NUM_ADHESION>
            <NUM_ASSURE>${covered_element_party.code}</NUM_ASSURE>
            <TYPE_ADHESION>${'PARTICULIER' if subscriber.is_person else 'ENTREPRISE'}</TYPE_ADHESION>
            <NUM_PAC>${str(contract.contract_number or contract.quote_number) + '0' + str(index_loan) + '-1'}</NUM_PAC>
            <FRAIS_AGIS>${total_cotisation_agis_fee}</FRAIS_AGIS>
            <FRAIS_DOSSIER>${total_cotisation_document_fee}</FRAIS_DOSSIER>
            <FRAIS_COURTAGE>${total_cotisation_brokerage_fee}</FRAIS_COURTAGE>
        </GENERAL>
        <ADHERENT py:if="to_generate and subscriber.is_person" >
            <NOM_ADH>${subscriber.name}</NOM_ADH>
            <PRENOM_ADH>${subscriber.first_name}</PRENOM_ADH>
            <ADRESSE_ADH>${subscriber_address.street if subscriber_address else ''}</ADRESSE_ADH>
            <CODE_POSTAL_ADH>${subscriber_address.zip if subscriber_address else ''}</CODE_POSTAL_ADH>
            <VILLE_ADH>${subscriber_address.city if subscriber_address else ''}</VILLE_ADH>
            <PAYS_ADH>${subscriber_address.country.name if subscriber_address and subscriber_address.country else ''}</PAYS_ADH>
        </ADHERENT>
        <ADHERENT_SCI py:if="to_generate and not subscriber.is_person" >
            <RAISON_SOCIALE>${subscriber.name}</RAISON_SOCIALE>
            <SIREN>${subscriber.siren}</SIREN>
            <ADRESSE_SCI>${subscriber_address.street if subscriber_address else ''}</ADRESSE_SCI>
            <CODE_POSTAL_ADH>${subscriber_address.zip if subscriber_address else ''}</CODE_POSTAL_ADH>
            <VILLE_ADH>${subscriber_address.city if subscriber_address else ''}</VILLE_ADH>
            <PAYS_ADH>${subscriber_address.country.name if subscriber_address and subscriber_address.country else ''}</PAYS_ADH>
        </ADHERENT_SCI>
        <EMPRUNTEUR_ASSURE py:if="to_generate">
            <CIVILITE>${covered_element_party.gender_string}</CIVILITE>
            <NOM>${covered_element_party.name}</NOM>
            <NOM_DE_NAISSANCE>${covered_element_party.birth_name}</NOM_DE_NAISSANCE>
            <PRENOM>${covered_element_party.first_name}</PRENOM>
            <VILLE py:if="covered_element_address">${covered_element_address.city}</VILLE>
            <CODE_POSTAL py:if="covered_element_address">${covered_element_address.zip}</CODE_POSTAL>
            <ADRESSE py:if="covered_element_address">${covered_element_address.street}</ADRESSE>
            <DEUXIEME_PRENOM>${covered_element_party.second_name}</DEUXIEME_PRENOM>
            <TROISIEME_PRENOM>${covered_element_party.third_name}</TROISIEME_PRENOM>
            <DEPARTEMENT_DE_NAISSANCE>${covered_element_party.birth_zip}</DEPARTEMENT_DE_NAISSANCE>
            <VILLE_DE_NAISSANCE>${covered_element_party.birth_city if covered_element_party.birth_city else ''}</VILLE_DE_NAISSANCE>
            <PAYS_DE_NAISSANCE>${covered_element_party.birth_country.name}</PAYS_DE_NAISSANCE>
            <DATE_DE_NAISSANCE>${covered_element_party.birth_date.strftime('%d/%m/%Y')}</DATE_DE_NAISSANCE>
            <PROFESSION>${covered_element_party.extra_data_string.get('profession_exacte', '')}</PROFESSION>
            <CATEGORIE_PROFESSIONNELLE>${covered_element_version.extra_data_string.get('categorie_professionnelle', '')}</CATEGORIE_PROFESSIONNELLE>
            <FUMEUR>${covered_element_version.extra_data_string.get('fumeur', '')}</FUMEUR>
            <SITUATION_FAMILIALE>${covered_element_party.extra_data_string.get('situation_familiale', '')}</SITUATION_FAMILIALE>
        </EMPRUNTEUR_ASSURE>
        <ORGANISME_PRETEURS py:if="to_generate">
            <DENOMINATION_PRETEUR>${loan_after_simulation.get('loan_lender_name', None)}</DENOMINATION_PRETEUR>
            <AGENCE>${loan_after_simulation.get('loan_lender_agency', None)}</AGENCE>
            <ADRESSE_PRETEUR>${loan_after_simulation.get('loan_lender_address', None)}</ADRESSE_PRETEUR>
        </ORGANISME_PRETEURS>
        <INFORMATIONS_DU_PRET py:if="to_generate">
            <?python
                type_deferral_string = {'': 'Pas de différé', 'partially': 'Différé Partiel', 'fully': 'Différé Total'}
                type_deferral = None
                loan_deferral = loan_after_simulation.get('loan_deferral', '')
                duration_deferral = 0
                if loan_after_simulation.get('loan_kind', 'wrong_loan_kind') in ('intermediate', 'balloon'):
                    type_deferral = type_deferral_string.get(loan_after_simulation.get('loan_deferral_balloon_intermediate', ''), 'Type différé non valid')
                    duration_deferral = loan_after_simulation.get('loan_duration', 0) - 1
                else:
                    type_deferral = type_deferral_string.get(loan_deferral, 'Type différé non valid')
                    duration_deferral = loan_after_simulation.get('loan_deferral_duration', None)

                first_increment_amount = Decimal(0)
                loan_loan_kind_code = loan_after_simulation.get('loan_loan_kind_code', 'wrong_kind_code')
                loan_increments = loan_after_simulation.get('loan_increments', [])
                first_increment_amount = loan_increments[0]['payment_amount']
                if loan_loan_kind_code not in ('PRT_FINE', 'PRT_REL'):
                    not_deferral_increment = None
                    if loan_loan_kind_code in ('PRT_AMOR', 'PRT_AMORTZ'):
                        not_deferral_increment = [increment for increment in loan_increments if increment['deferral'] not in ['fully', 'partially']]
                    elif loan_loan_kind_code == 'PRT_AMORPAL':
                        not_deferral_increment = [increment for increment in loan_increments if increment['deferral'] != 'partially']
                    elif loan_loan_kind_code == 'PRT_PTZ':
                        not_deferral_increment = [increment for increment in loan_increments if increment['deferral'] != 'fully']
                    if not_deferral_increment:
                        first_increment_amount = not_deferral_increment[0]['payment_amount']
                        loan_increments = not_deferral_increment
            ?>
            <MONTANT>${loan_after_simulation.get('loan_amount', '')}</MONTANT>
            <TYPE_DE_PRET>${loan_after_simulation.get('loan_kind_string', '')}</TYPE_DE_PRET>
            <TAUX_HORS_ASSURANCE>${loan_after_simulation.get('loan_rate', 0) * 100}</TAUX_HORS_ASSURANCE>
            <OBJET_PRET>${loan_after_simulation.get('loan_extra_data_string', {}).get('objet_du_pret', '')}</OBJET_PRET>
            <DUREE>${loan_after_simulation.get('loan_duration', '')}</DUREE>
            <DUREE_DIFFERE>${duration_deferral}</DUREE_DIFFERE>
            <TYPE_DE_DIFFERE>${type_deferral}</TYPE_DE_DIFFERE>
            <MONTANT_ECHEANCES_LOYERS>${str("%.2f" % first_increment_amount).replace('.', ',')}</MONTANT_ECHEANCES_LOYERS>
            <PALIERS>
                <PALIER py:for="index_increment, increment in enumerate(loan_increments)">
                    <VALEUR>${"Palier "+ str(index_increment + 1) + " : " + str(increment['number_of_payments']) + " mois à "+ str("%.2f" % increment['payment_amount']).replace('.', ',')  + " €" if len(loan_increments) > 1 else str("%.2f" % increment['payment_amount']).replace('.', ',') + " €"}</VALEUR>
                </PALIER>
            </PALIERS>
            <MONTANT_ECRETEMENT></MONTANT_ECRETEMENT>
            <DATE_EFFET_PRET>${max(contract.initial_start_date, loan_after_simulation.get('loan_funds_release_date', datetime.date.min)).strftime('%d/%m/%Y')}</DATE_EFFET_PRET>
            <OPTIONS_AGE>${options_age.split(' ')[0] if options_age else None}</OPTIONS_AGE>
        </INFORMATIONS_DU_PRET>    
        <DETAILS_DES_GARANTIES py:if="to_generate">
            <DETAIL_DE_GARANTIE py:for="garantie_code in loan_options_code.keys()">
                <GARANTIE>${codes_options.get(garantie_code, '')}</GARANTIE>
                <DECISION_ASSUREUR>${decision_insurer}</DECISION_ASSUREUR>
                <QUOTITE>${int(loan_options_code.get(garantie_code) * 100) if loan_options_code.get(garantie_code, None) else None}</QUOTITE>
                <DECISION_ANALYSE_DE_RISQUE>${loan_options_decision.get(garantie_code, '')}</DECISION_ANALYSE_DE_RISQUE>
                <SURPRIME>${'Oui' if options_extra_premiums.get(garantie_code, None) else 'Non'}</SURPRIME>
                <MOTIF_SURPRIME>
                    <MOTIF_SURPRIME_IT py:for="extra_premium_motive in options_extra_premiums.get(garantie_code, [])">
                        <VALEUR>${extra_premium_motive}</VALEUR>
                    </MOTIF_SURPRIME_IT>
                </MOTIF_SURPRIME>
                <CONTENU_EXCLUSION>
                    <CONTENU_EXCLUSION_IT py:for="exclusion_comment in options_exclusions.get(garantie_code, [])">
                        <VALEUR>${exclusion_comment}</VALEUR>
                    </CONTENU_EXCLUSION_IT>
                </CONTENU_EXCLUSION>
            </DETAIL_DE_GARANTIE>
        </DETAILS_DES_GARANTIES>
        <OPTIONS py:if="to_generate">
            <OPTION py:for="option_code in loan_mno_sport_code.keys()">
                <OPTION_SOUHAITEE>${loan_mno_sport_code.get(option_code, '')}</OPTION_SOUHAITEE>
                <DECISION_OPTION>${loan_mno_sport_decision.get(option_code, '')}</DECISION_OPTION>
            </OPTION>
        </OPTIONS>
        <GARANTIES_PHRASE py:if="to_generate">
            <ITT>${'Incapacité Temporaire Totale de Travail (ITT)' if loan_options_code.get('slade_itt', None) else ''}</ITT>
            <IPT>${'Invalidité Permanente et Totale (IPT)' if loan_options_code.get('slade_ipt', None) else ''}</IPT>
            <IPP>${'Invalidité Permanente Partielle (IPP)' if loan_options_code.get('slade_ipp', None) else ''}</IPP>
            <IPPRO>${'Invalidité Professionnelle (IPPro)' if loan_options_code.get('slade_ippro', None) else ''}</IPPRO>
            <PE>${"Perte d'Emploi (PE)" if loan_options_code.get('slade_pe', None) else ''}</PE>
            <?python
            franchise_itt = ''
            franchise_pe = ''
            carence_pe = ''
            type_ipt = ''
            type_ippro = ''
            for option_code in options_after_simulation.keys():
                if options_after_simulation[option_code]:
                    s = options_after_simulation[option_code][-1]
                    if s['extra_data_string'].get('franchise_itt_slade', None) and loan_options_code.get('slade_itt', None):
                        franchise_itt = s['extra_data_string'].get('franchise_itt_slade', '')
                    if s['extra_data_string'].get('franchise_pe_slade', None) and loan_options_code.get('slade_pe', None):
                        franchise_pe = s['extra_data_string'].get('franchise_pe_slade', '')
                    if s['extra_data_string'].get('carence_pe_slade', None) and loan_options_code.get('slade_pe', None):
                        carence_pe = s['extra_data_string'].get('carence_pe_slade', '')
                    if s['extra_data_string'].get('mode_de_versement', None):
                        if option_code == 'slade_ipt' and loan_options_code.get('slade_ipt', None):
                            type_ipt = s['extra_data_string'].get('mode_de_versement', '')
                        elif option_code == 'slade_ippro' and loan_options_code.get('slade_ippro', None):
                            type_ippro = s['extra_data_string'].get('mode_de_versement', '')
            ?>
            <FRANCHISE_ITT>${franchise_itt}</FRANCHISE_ITT>
            <FRANCHISE_PE>${franchise_pe}</FRANCHISE_PE>
            <CARENCE_PE>${carence_pe}</CARENCE_PE>
            <TYPE_IPT>${type_ipt}</TYPE_IPT>
            <TYPE_IPPRO>${type_ippro}</TYPE_IPPRO>
        </GARANTIES_PHRASE>
        <ORGANISME_BENEFICIAIRE py:if="to_generate">
            <NOM_BENEFICIAIRE>${loan_after_simulation.get('loan_lender_commercial_name', '')}</NOM_BENEFICIAIRE>
            <ADRESSE_BENEFICIAIRE>${loan_after_simulation.get('loan_lender_street', '')}</ADRESSE_BENEFICIAIRE>
            <CODE_POSTAL_BENEFICIAIRE>${loan_after_simulation.get('loan_lender_zip', '')}</CODE_POSTAL_BENEFICIAIRE>
            <VILLE_BENEFICIAIRE>${loan_after_simulation.get('loan_lender_city', '')}</VILLE_BENEFICIAIRE>
            <PAYS_BENEFICIAIRE>${loan_after_simulation.get('loan_lender_country', '')}</PAYS_BENEFICIAIRE>
        </ORGANISME_BENEFICIAIRE>
        <ECHEANCIERS_DES_COTISATIONS_PRET py:if="to_generate">
            <?python
                first_payment_date = max(first_payment_date, loan_after_simulation.get('loan_funds_release_date', datetime.date.min))
                if first_payment_date:
                    next_month_date = first_payment_date + relativedelta.relativedelta(months=1)
                    first_payment_date = datetime.datetime(day=5, month=next_month_date.month, year=next_month_date.year)
            ?>    
            <NUMERO_DU_PRET>${loan_after_simulation.get('loan_number', '')}</NUMERO_DU_PRET>
            <PERIODICITE_DES_COTISATIONS>${possible_frequencies.get(loan_after_simulation.get('loan_payment_frequency', ''), '')}</PERIODICITE_DES_COTISATIONS>
            <DATE_DE_L_ECHEANCE_DE_LA_PREMIERE_COTISATION>${first_payment_date.strftime('%d/%m/%Y') if first_payment_date else ''}</DATE_DE_L_ECHEANCE_DE_LA_PREMIERE_COTISATION>
            <TOTAL_GENERAL_DC_PTIA_SD>${total_cotisation_dc_ptia_standard}</TOTAL_GENERAL_DC_PTIA_SD>
            <TOTAL_GENERAL_IPP_IPT_ITT_SD>${total_cotisation_itip_standard}</TOTAL_GENERAL_IPP_IPT_ITT_SD>
            <TOTAL_GENERAL_COTISATION_ANNUELLE_SD>${total_cotisation_total_standard}</TOTAL_GENERAL_COTISATION_ANNUELLE_SD>
            <TOTAL_GENERAL_DONT_OPTIONS_SD>${total_cotisation_option_standard}</TOTAL_GENERAL_DONT_OPTIONS_SD>
            <TOTAL_GENERAL_DC_PTIA_S>${total_cotisation_dc_ptia_standard_underwriting + total_cotisation_dc_ptia_extra_premium}</TOTAL_GENERAL_DC_PTIA_S>
            <TOTAL_GENERAL_IPP_IPT_ITT_S>${total_cotisation_itip_standard_underwriting + total_cotisation_itip_extra_premium}</TOTAL_GENERAL_IPP_IPT_ITT_S>
            <TOTAL_GENERAL_COTISATION_ANNUELLE_S>${total_cotisation_total_standard_underwriting + total_cotisation_total_extra_premium}</TOTAL_GENERAL_COTISATION_ANNUELLE_S>
            <TOTAL_GENERAL_DONT_OPTIONS_S>${total_cotisation_option_standard_underwriting + total_cotisation_option_extra_premium}</TOTAL_GENERAL_DONT_OPTIONS_S>
            <TAUX_MOYEN_SD>Action Cegema: Comment alimenter ce champs?</TAUX_MOYEN_SD>
            <TAUX_MOYEN_S>${round(average_rates.get(loan.id).get('average_premium_rate').get(loan.id), 4) if average_rates.get(loan.id, None) else 0}</TAUX_MOYEN_S>
            <TYPE_DE_REGLEMENT>${'CRD' if contract.extra_datas and contract.extra_datas[-1].extra_data_values.get('tarif_sur_capital', None) == 'crd' else 'CI'}</TYPE_DE_REGLEMENT>
            <ECHEANCIERS_DES_COTISATIONS>
                <ECHEANCIER_DES_COTISATIONS py:for="year in contract_years">
                    <ECHEANCE>${year['start_date'].strftime('%d/%m/%Y')}</ECHEANCE>
                    <CAPITAL_RESTANT_DU>${loan.get_outstanding_loan_balance(at_date=max(year['start_date'], loan_after_simulation.get('loan_funds_release_date', datetime.date.min)))}</CAPITAL_RESTANT_DU>
                    <COTISATION_ANNUELLE_DC_PTIA_SD>${year['cotisation_dc_ptia_standard'] if 'cotisation_dc_ptia_standard' in year else Decimal(0)}</COTISATION_ANNUELLE_DC_PTIA_SD>
                    <COTISATION_ANNUELLE_IPP_IPT_ITT_SD>${year['cotisation_itip_standard'] if 'cotisation_itip_standard' in year else Decimal(0)}</COTISATION_ANNUELLE_IPP_IPT_ITT_SD>
                    <DONT_OPTION_SD>${year['cotisation_option_standard'] if 'cotisation_option_standard' in year else Decimal(0)}</DONT_OPTION_SD>
                    <TOTAL_COTISATION_ANNUELLE_SD>${year['cotisation_total_standard'] if 'cotisation_total_standard' in year else Decimal(0)}</TOTAL_COTISATION_ANNUELLE_SD>
                    <COTISATION_ANNUELLE_DC_PTIA_S>${year['cotisation_dc_ptia_standard_underwriting'] + year['cotisation_dc_ptia_extra_premium'] if 'cotisation_dc_ptia_standard_underwriting' in year and 'cotisation_dc_ptia_extra_premium' in year else Decimal(0)}</COTISATION_ANNUELLE_DC_PTIA_S>
                    <COTISATION_ANNUELLE_IPP_IPT_ITT_S>${year['cotisation_itip_standard_underwriting'] + year['cotisation_itip_extra_premium'] if 'cotisation_itip_standard_underwriting' in year and 'cotisation_itip_extra_premium' in year else Decimal(0)}</COTISATION_ANNUELLE_IPP_IPT_ITT_S>
                    <DONT_OPTION_S>${year['cotisation_option_standard_underwriting'] + year['cotisation_option_extra_premium'] if 'cotisation_option_standard_underwriting' in year and 'cotisation_option_extra_premium' in year else Decimal(0)}</DONT_OPTION_S>
                    <TOTAL_COTISATION_ANNUELLE_S>${year['cotisation_total_standard_underwriting'] + year['cotisation_total_extra_premium'] if 'cotisation_total_standard_underwriting' in year and 'cotisation_total_extra_premium' in year else Decimal(0)}</TOTAL_COTISATION_ANNUELLE_S>
                </ECHEANCIER_DES_COTISATIONS>
            </ECHEANCIERS_DES_COTISATIONS>
        </ECHEANCIERS_DES_COTISATIONS_PRET>
    </DOCUMENT>
</ROOT> 
