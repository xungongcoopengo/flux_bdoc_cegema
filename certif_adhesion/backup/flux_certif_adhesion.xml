<?xml version="1.0" encoding="UTF-8"?>
<FLUX xmlns:py="http://genshi.edgewall.org/">
<?python
    import datetime
?>
<py:for each="contract_loan in objects">
    <?python
        contract = contract_loan.contract
        loan = contract_loan.loan
        subscriber = contract.subscriber
        subscriber_address = None
        if subscriber.main_address:
            subscriber_address = subscriber.main_address
        elif subscriber.addresses:
            subscriber_address = subscriber.addresses[-1]
        covered_elements = contract.covered_elements
        options = contract.covered_element_options
        shares = [share for share in contract.shares_per_loan if share.loan == loan.id]

        option_serenite_plus = False
        option_serenite = False
        option_sport = False
        option_premium = False
        option_exclusion = False
        for option in options:
            # to check existe quotite
            if option.coverage.code == 'slade_sport':
                option_sport = True
            if option.exclusions:
                option_exclusion = True
            if option.extra_premiums:
                option_premium = True
            for version in option.versions:
                if version.extra_data:
                    if 'slade_mno_option' in version.extra_data:
                        if version.extra_data['slade_mno_option'] == 'serenite':
                            option_serenite = True
                        elif version.extra_data['slade_mno_option'] == 'serenite plus':
                            option_serenite_plus = True

        premiums = contract.get_future_invoices(contract.id)
        current_premium_start = premiums[0]['start']
        months_of_current_year = 0
        remain_capital = 0
        amount_dc_ptia = 0
        amount_ipp_ipt_itt = 0
        optional_amount = 0
        amount_year = 0
        total_amount_dc_ptia = 0
        total_amount_ipp_ipt_itt = 0
        total_amount_fee = 0
        total_amount_optionals = 0
        dc_ptia = ['death', 'total_autonomy_loss']
        ipp_ipt_itt = ['partial_disability', 'total_disability', 'temporary_disability']
        results = []
        for idx, premium in enumerate(premiums):
            if premium['start'].year != current_premium_start.year or idx == len(premiums) - 1:
                months_current_year = premium['start'].month if idx == len(premiums) - 1 else 13 - current_premium_start.month
                results.append({'current_premium_start': current_premium_start,
                        'remain_capital': remain_capital,
                        'amount_dc_ptia': amount_dc_ptia,
                        'amount_ipp_ipt_itt': amount_ipp_ipt_itt,
                        'optional_amount': optional_amount,
                        'amount_year': amount_year,
                        'amount_month': round(amount_year / months_current_year, 2),
                        })
                remain_capital = 0
                amount_dc_ptia = 0
                amount_ipp_ipt_itt = 0
                optional_amount = 0
                amount_year = 0
                current_premium_start = premium['start']
            for detail in premium['details']:
                if detail['premium'].option and detail['premium'].option.coverage:
                    if detail['premium'].option.coverage.insurance_kind in dc_ptia:
                        amount_dc_ptia += detail['total_amount']
                        total_amount_dc_ptia += detail['total_amount']
                    elif detail['premium'].option.coverage.insurance_kind in ipp_ipt_itt:
                        amount_ipp_ipt_itt += detail['total_amount']
                        total_amount_ipp_ipt_itt += detail['total_amount']
                    elif detail['premium'].option.coverage not in detail['premium'].option.coverage.options_required:
                        optional_amount += detail['total_amount']
                        total_amount_optionals += optional_amount
            amount_year += amount_dc_ptia + amount_ipp_ipt_itt
            months_of_current_year += 1
            total_amount_fee += premium['fee']
        total_amount_years = total_amount_dc_ptia + total_amount_ipp_ipt_itt
        total_months = (premiums[-1]['start'].year - premiums[0]['start'].year) * 12 + premiums[-1]['start'].month - premiums[0]['start'].month
        total_amount_month = round(total_amount_years / total_months, 2) 
        yearly_average_rate = loan.rate / (premiums[-1]['start'].year - premiums[0]['start'].year)
        total_general = total_amount_years + total_amount_fee
    ?>
    <ROOT>
        <DOCUMENT>
            <TECHDATA>
                <MODELE>EMPRUNTEUR CERTIFICAT ADHESION</MODELE>
                <NUM_ASSURE>${contract.covered_elements[0].party.code}</NUM_ASSURE>
                <NOM_ASSURE>${contract.covered_elements[0].party.name}</NOM_ASSURE>
                <PRENOM_ASSURE>${contract.covered_elements[0].party.first_name}</PRENOM_ASSURE>
                <DATE_NAISSANCE_ASSURE>${contract.covered_elements[0].party.birth_date}</DATE_NAISSANCE_ASSURE>
                <ORIGINE>BDOC</ORIGINE>
                <DOCUMENT_ENTRANT_SORTANT>S</DOCUMENT_ENTRANT_SORTANT>
                <MOTIF>Document sortant</MOTIF>
                <SOUS_MOTIF>Archives</SOUS_MOTIF>
                <SIGNE_ELECTRONIQUEMENT>O</SIGNE_ELECTRONIQUEMENT>
                <GED>O</GED>
                <GED_ONBASE>O</GED_ONBASE>
                <GED_NOM_FICHIER>Certificat_adhesion_${datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</GED_NOM_FICHIER>
                <RETOUR_STATUS>O ou N</RETOUR_STATUS>
            </TECHDATA>
            <QR_CODE>
                <TYPE_DOCUMENT>Certificat d'adh√©sion</TYPE_DOCUMENT>
                <NUM_CONTRAT>${contract.contract_number}</NUM_CONTRAT>
            </QR_CODE>
            <GENERAL>
                <NUM_ADHESION>${subscriber.get_identifier_value('number_adherent', subscriber.code)}</NUM_ADHESION>
                <NUM_ASSURE>${contract.covered_elements[0].party.code}</NUM_ASSURE>
                <TYPE_ADHESION>${'PARTICULIER' if subscriber.is_person else 'ENTREPRISE'}</TYPE_ADHESION>
                <DATE_EFFET_GARANTIES>${contract.initial_start_date.strftime('%d/%m/%Y')}</DATE_EFFET_GARANTIES>
                <ORDRE_ASSURE>1</ORDRE_ASSURE>
            </GENERAL>
        
            <COURTIER>
                <NOM_COURTIER>${contract.broker.party.name}</NOM_COURTIER>
                <NUM_TELEPHONE>${contract.broker.party.phone}</NUM_TELEPHONE>
                <EMAIL>${contract.broker.party.email}</EMAIL>
                <CODE>${contract.broker.party.code}</CODE>
            </COURTIER>
        
            <?python
                party = covered_elements[0].party if covered_elements and covered_elements[0].party else None
                address = None
                if party:
                    if party.main_address:
                        address = party.main_address
                    elif party.addresses:
                        address = party.addresses[-1]
            ?>
            <EMPRUNTEUR_ASSURER>
                <CIVILITE>${party.gender_string if party else ''}</CIVILITE>
                <NOM>${party.name if party else ''}</NOM>
                <NOM_DE_NAISSANCE>${party.birth_name if party else ''}</NOM_DE_NAISSANCE>
                <PRENOM>${party.first_name if party else ''}</PRENOM>
                <VILLE>${address.city if address else ''}</VILLE>
                <CODE_POSTAL>${address.zip if address else ''}</CODE_POSTAL>
                <ADRESSE>${address.street if address else ''}</ADRESSE>
                <DEUXIEME_PRENOM>${party.second_name if party else ''}</DEUXIEME_PRENOM>
                <TROISIEME_PRENOM>${party.third_name if party else ''}</TROISIEME_PRENOM>
                <DEPARTEMENT_DE_NAISSANCE>${party.birth_zip if party else ''}</DEPARTEMENT_DE_NAISSANCE>
                <VILLE_DE_NAISSANCE>${party.birth_city if party else ''}</VILLE_DE_NAISSANCE>
                <PAYS_DE_NAISSANCE>${party.birth_country.name if party else ''}</PAYS_DE_NAISSANCE>
                <DATE_DE_NAISSANCE>${party.birth_date.strftime('%d/%m/%Y') if party else ''}</DATE_DE_NAISSANCE>
                 <!--to check-->
                <PROFESSION_SPECIFIQUE>${covered_elements[0].get_version_at_date(contract.initial_start_date).extra_data['profession_specifique'] if covered_elements and covered_elements[0].get_version_at_date(contract.initial_start_date) and covered_elements[0].get_version_at_date(contract.initial_start_date).extra_data['profession_specifique'] else ''}</PROFESSION_SPECIFIQUE>
                <CATEGORIE_PROFESSIONNELLE>${covered_elements[0].get_version_at_date(contract.initial_start_date).extra_data['categorie_professionnelle'] if  covered_elements and covered_elements[0].get_version_at_date(contract.initial_start_date) and covered_elements[0].get_version_at_date(contract.initial_start_date).extra_data['categorie_professionnelle'] else ''}</CATEGORIE_PROFESSIONNELLE>
                <FUMEUR>${covered_elements[0].get_version_at_date(contract.initial_start_date).extra_data['fumeur'] if covered_elements and covered_elements[0].get_version_at_date(contract.initial_start_date) and covered_elements[0].get_version_at_date(contract.initial_start_date).extra_data['fumeur'] else ''}</FUMEUR>
                <SITUATION_FAMILIALE>${covered_elements[0].party.extra_data['situation_familiale'] if covered_elements and covered_elements[0].party and covered_elements[0].party.extra_data['situation_familiale'] else ''}</SITUATION_FAMILIALE>
            </EMPRUNTEUR_ASSURER>
            
            <py:if test="subscriber.is_person">
            <ADHERENT>
                <NOM_ADH>${subscriber.name}</NOM_ADH>
                <PRENOM_ADH>${subscriber.first_name}</PRENOM_ADH>
                <ADRESSE_ADH>${subscriber_address.street if subscriber_address else ''}</ADRESSE_ADH>
                <CODE_POSTAL_ADH>${subscriber_address.zip if subscriber_address else ''}</CODE_POSTAL_ADH>
                <VILLE_ADH>${subscriber_address.city if subscriber_address else ''}</VILLE_ADH>
                <PAYS_ADH>${subscriber_address.country.name if subscriber_address and subscriber_address.country else ''}</PAYS_ADH>
            </ADHERENT>
            </py:if>
            <py:if test="not subscriber.is_person">
            <ADHERENT_SCI>
                <RAISON_SOCIALE>${subscriber.name}</RAISON_SOCIALE>
                <SIREN>${subscriber.siren}</SIREN>
                <ADRESSE_SCI>${subscriber_address.street if subscriber_address else ''}</ADRESSE_SCI>
                <CODE_POSTAL_ADH>${subscriber_address.zip if subscriber_address else ''}</CODE_POSTAL_ADH>
                <VILLE_ADH>${subscriber_address.city if subscriber_address else ''}</VILLE_ADH>
                <PAYS_ADH>${subscriber_address.country.name if subscriber_address and subscriber_address.country else ''}</PAYS_ADH>
            </ADHERENT_SCI>
            </py:if>

            <?python
                lender = loan.lender
                lender_address = loan.lender_address
            ?>
            <ORGANISME_PRETEUR>
                <DENOMINATION_PRETEUR>${lender.commercial_name if lender else ''}</DENOMINATION_PRETEUR>
                <AGENCE>${lender_address.bank_agency.name if lender_address and lender_address.bank_agency else ''}</AGENCE>
                <ADRESSE_PRETEUR>${lender_address.full_address if lender_address else ''}</ADRESSE_PRETEUR> <!--Renseigner l'adresse au complet pour le pr√™teur-->
            </ORGANISME_PRETEUR>

            <GARANTIES py:choose="">
            <py:for each="option in options">
                <DATE_DE_CESSATIONS_DES_GARANTIES>${contract.end_date}</DATE_DE_CESSATIONS_DES_GARANTIES>
                <PERIODICITE_DES_COTISATIONS>${contract.billing_information.billing_mode.frequency}</PERIODICITE_DES_COTISATIONS>
                <PERIODICITE_DES_ECHEANCES>${loan.payment_frequency}</PERIODICITE_DES_ECHEANCES>
                <!-- Concerne les echances de paiement de la prime de l'assurance -->
                <!-- Remplir avec Serenit√©, S√©r√©nit√© + ou laisser vide en fonction -->
                <OPTIONS_SERENITE py:when="option_serenite_plus">Serenit√© +</OPTIONS_SERENITE>
                <!-- Remplir avec Serenit√©, S√©r√©nit√© + ou laisser vide en fonction -->
                <OPTIONS_SERENITE py:when="option_serenite">Serenit√©</OPTIONS_SERENITE>
                <!-- Remplir avec Serenit√©, S√©r√©nit√© + ou laisser vide en fonction -->
                <OPTIONS_SERENITE py:otherwise=""></OPTIONS_SERENITE>
                <OPTIONS_SPORT>${'Sport +' if option_sport else ''}</OPTIONS_SPORT>
                 <!--1 si suprime ou exclusion, 0 sinon -->
                <DETAIL_DES_CONDITIONS>${'1' if option_premium or option_exclusion else '0'}</DETAIL_DES_CONDITIONS>
            </py:for>
            </GARANTIES>
        

            <TABLEAU_DES_GARANTIES><!--Ne rien renvoyer si la garantie n'est pas selectionn√©e -->
            <py:for each="option in options">
                <DC py:if="option.coverage.insurance_kind=='death'">D√©c√®s</DC>
                <PTIA py:if="option.coverage.insurance_kind=='total_autonomy_loss'">Perte totale et irr√©versible d'automonie</PTIA>
                <IPP py:if="option.coverage.insurance_kind=='partial_disability'">Invalidit√© permanente partielle</IPP>
                <IPT py:if="option.coverage.insurance_kind=='total_disability'">Invalidit√© permanente et totale</IPT>
                <ITT py:if="option.coverage.insurance_kind=='temporary_disability'">Incapacit√© totale de travail</ITT>
            </py:for>
            <py:for each="share in shares">
                <?python
                    coverage = share.option.coverage
                ?>
                <QUOTITE_DC py:if="coverage.insurance_kind=='death'">${share.share*100}%</QUOTITE_DC>
                <QUOTITE_PTIA py:if="coverage.insurance_kind=='total_autonomy_loss'">${share.share*100}%</QUOTITE_PTIA>
                <QUOTITE_IPP py:if="coverage.insurance_kind=='partial_disability'">${share.share*100}%</QUOTITE_IPP>
                <QUOTITE_IPT py:if="coverage.insurance_kind=='total_disability'">${share.share*100}%</QUOTITE_IPT>
                <QUOTITE_ITT py:if="coverage.insurance_kind=='temporary_disability'">${share.share*100}%</QUOTITE_ITT>
            </py:for>
            </TABLEAU_DES_GARANTIES>

            <DETAILS_DES_GARANTIES> <!-- Ne pas renvoyer de boucle si la garantie n'est pas selectionn√©e -->
                <py:for each="share in shares">
                <DETAIL_DE_GARANTIE>
                    <GARANTIE py:if="share.option.coverage.insurance_kind=='death'">D√©c√®s (DC)</GARANTIE>
                    <GARANTIE py:if="share.option.coverage.insurance_kind=='total_autonomy_loss'">Perte Totale et Irr√©versible d'Autonomie (PTIA)</GARANTIE>
                    <GARANTIE py:if="share.option.coverage.insurance_kind=='partial_disability'">Invalidit√© Permanente Partielle (IPP)</GARANTIE>
                    <GARANTIE py:if="share.option.coverage.insurance_kind=='total_disability'">Invalidit√© Permanente Totale(IPT)</GARANTIE>
                    <GARANTIE py:if="share.option.coverage.insurance_kind=='temporary_disability'">Incapcit√© Temporaire Totale de Travail (ITT)</GARANTIE>
                    <DATE_DE_CESSATIONS_DES_GARANTIES>${share.option.end_date.strftime('%d/%m/%Y')}</DATE_DE_CESSATIONS_DES_GARANTIES>
                </DETAIL_DE_GARANTIE>
                </py:for>
            </DETAILS_DES_GARANTIES>

            <INFORMATION_DU_PRET>
                <NUMERO_DU_PRET>${loan.order}</NUMERO_DU_PRET>
                <MONTANT>${loan.amount} ${loan.currency_symbol}</MONTANT>
                <TYPE_DE_PRET>${loan.kind_string}</TYPE_DE_PRET>
                <TAUX_HORS_ASSURANCE>${loan.rate*100}%</TAUX_HORS_ASSURANCE>
                <OBJET_PRET>${loan.extra_data['objet_du_pret'] if loan.extra_data and 'object_du_pret' in loan.extra_data else ''}</OBJET_PRET>
                <DUREE>${loan.duration}</DUREE>
                <DONT_DIFFERE>${loan.deferral_duration} ${loan.duration_unit}</DONT_DIFFERE>
            </INFORMATION_DU_PRET>

            <ECHEANCIERS_DES_COTISATIONS>
                <py:for each="result in results">
                <ECHEANCIER_DES_COTISATIONS>
                    <POUR_L_ANNEE_COMMENCANT_LE>${result['current_premium_start'].strftime('%d/%m/%Y')}</POUR_L_ANNEE_COMMENCANT_LE>
                    <CAPITAL_RESTANT_DU>${loan.get_outstanding_loan_balance(at_date=max(result['current_premium_start'], loan.funds_release_date))}</CAPITAL_RESTANT_DU>
                    <COTISATION_ANNUELLE_DC_PTIA>${result['amount_dc_ptia']}</COTISATION_ANNUELLE_DC_PTIA>
                    <COTISATION_ANNUELLE_IPP_IPT_ITT>${result['amount_ipp_ipt_itt']}</COTISATION_ANNUELLE_IPP_IPT_ITT>
                    <TOTAL_COTISATION_ANNUELLE>${result['amount_year']}</TOTAL_COTISATION_ANNUELLE>
                    <DONT_OPTIONS>${result['optional_amount']}</DONT_OPTIONS>
                    <COTISATION_MENSUELLE_MOYENNE>${result['amount_month']}</COTISATION_MENSUELLE_MOYENNE>
                </ECHEANCIER_DES_COTISATIONS>
                </py:for>
            </ECHEANCIERS_DES_COTISATIONS>
            <ECHEANCIER_DE_COTISATION_UNIQUE>
                <PERIODICITE_DES_COTISATIONS py:if="contract.billing_information.billing_mode.frequency=='monthly'">Mensuelle</PERIODICITE_DES_COTISATIONS>
                <PERIODICITE_DES_COTISATIONS py:if="contract.billing_information.billing_mode.frequency=='quarterly'">Trimestrielle</PERIODICITE_DES_COTISATIONS>
                <PERIODICITE_DES_COTISATIONS py:if="contract.billing_information.billing_mode.frequency=='half_yearly'">Semestrielle</PERIODICITE_DES_COTISATIONS>
                <PERIODICITE_DES_COTISATIONS py:if="contract.billing_information.billing_mode.frequency=='yearly'">Annuelle</PERIODICITE_DES_COTISATIONS>
                <DATE_DE_L_ECHEANCE_DE_LA_PREMIERE_COTISATION>${premiums[0]['start']}</DATE_DE_L_ECHEANCE_DE_LA_PREMIERE_COTISATION>
                <TOTAL_DES_COTISATIONS_DC_PTIA>${total_amount_dc_ptia}</TOTAL_DES_COTISATIONS_DC_PTIA>
                <TOTAL_DES_COTISATIONS_IPP_IPT_ITT>${total_amount_ipp_ipt_itt}</TOTAL_DES_COTISATIONS_IPP_IPT_ITT>
                <TOTAL_DES_COTISATIONS_ANNUELLE>${total_amount_years}</TOTAL_DES_COTISATIONS_ANNUELLE>
                <TOTAL_DES_COTISATIONS_DONT_OPTIONS>${total_amount_optionals}</TOTAL_DES_COTISATIONS_DONT_OPTIONS>
                <FRAIS_D_ADHESION_ET_FRAIS_DE_DOSSIER>${total_amount_fee}</FRAIS_D_ADHESION_ET_FRAIS_DE_DOSSIER>
                <TOTAL_GENERAL>${total_general}</TOTAL_GENERAL>
                <TAUX_MOYEN_ANNUEL>${yearly_average_rate}</TAUX_MOYEN_ANNUEL>
            </ECHEANCIER_DE_COTISATION_UNIQUE>
        </DOCUMENT>
    </ROOT>
</py:for>
</FLUX>
